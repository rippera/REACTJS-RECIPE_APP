{"version":3,"sources":["components/recipe/recipe.js","components/searchBar/searchBar.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","_ref","title","calories","image","ingredients","react_default","a","createElement","className","toFixed","src","alt","map","ingredient","text","SearchBar","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","urlLink","concat","useEffect","getRecipe","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","hits","console","log","stop","apply","this","arguments","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","recipe","recipe_recipe","key","label","App","searchBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06e1fc67.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = ({title,calories,image,ingredients})=>{\r\n    return(\r\n        <div className=\"col-lg-4 col-sm-6\">\r\n            <div className=\"recipe_box\">\r\n                <h1 className=\"title\"><span>title</span> : {title}</h1>\r\n                <p className=\"calories\">calories : {calories.toFixed(0)}</p>\r\n                <div className=\"img_box\">\r\n                    <img className='img_fluid' src={image} alt=\"\"/>\r\n                </div>\r\n                <p className=\"ingredients\">ingredients</p>\r\n                <ul className=\"recip_ul\">\r\n                    {ingredients.map(ingredient=>(\r\n                        \r\n                        <li>{ingredient.text}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Recipe;","import React,{useEffect, useState} from 'react';\r\nimport Recipe from '../recipe/recipe';\r\n\r\nconst SearchBar = () =>{\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [search,setSearch] = useState('');\r\n    const [query,setQuery] = useState('chiken')\r\n    let API_ID = '4eb8c3b3';\r\n    let API_KEY = '4a73c5811c82fb846611dc0dab2612b5';\r\n    let urlLink = `https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`;\r\n\r\n    useEffect(()=>{\r\n        getRecipe();\r\n    },[query]);\r\n\r\n    const getRecipe = async ()=>{\r\n        const response = await fetch(urlLink);\r\n        const data = await response.json();\r\n        setRecipes(data.hits);\r\n        console.log(data.hits);\r\n    }\r\n    const updateSearch = e =>{\r\n        setSearch(e.target.value);\r\n    }\r\n    const getQuery = e =>{\r\n        e.preventDefault();\r\n        setQuery(search);\r\n        setSearch('');\r\n    }\r\n    return (\r\n    <div className=\"\">\r\n        <form onSubmit={getQuery} className=\"searchbar_container\">\r\n            <input className=\"search_input\" type=\"text\" placeholder=\"search\" value={search} onChange={updateSearch} />\r\n            <button className=\"search_btn\">search</button>\r\n        </form>\r\n        <div className=\"row\">\r\n            {recipes.map(recipe=>(\r\n                <Recipe \r\n                    key={recipe.recipe.label}\r\n                    title={recipe.recipe.label}\r\n                    calories={recipe.recipe.calories}\r\n                    ingredients={recipe.recipe.ingredients}\r\n                    image={recipe.recipe.image}/>\r\n            ))}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\nexport default SearchBar;","import React from 'react';\r\nimport './css/reset.css';\r\nimport './css/grid.css';\r\nimport './css/style.css';\r\nimport SearchBar from './components/searchBar/searchBar';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"container\">\r\n        <h1 className='app_title'>recipe app</h1>\r\n        <SearchBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}